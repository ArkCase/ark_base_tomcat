#!/bin/bash

set -euo pipefail
. /.functions

cleanup()
{
	[ -v WORKDIR ] && rm -rf "${WORKDIR}" &>/dev/null
}

usage()
{
	[ ${#} -gt 0 ] && err "${@}"
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} artifact-url keys-url [ target ]"
	exit 1
}

urldecode()
{
	: "${*//+/ }"
	echo -e "${_//%/\\x}"
}

[ ${#} -ge 2 ] || usage
[ ${#} -le 3 ] || usage

ARTIFACT_URL="${1}"
[ -n "${ARTIFACT_URL}" ] || fail "Can't use an empty artifact URL"

KEYS_URL="${2}"
[ -n "${KEYS_URL}" ] || fail "Can't use an empty keys URL"

if [ ${#} -eq 3 ] ; then
	TARGET="${3}"
	[ -n "${TARGET}" ] || fail "Can't use an empty target location"
else
	TARGET="$(readlink -f .)"
fi

if [ -e "${TARGET}" ] ; then
	if is_dir "${TARGET}" ; then
		require_dir_writable "${TARGET}"
		TARGET_DIR="${TARGET}"
		TARGET_NAME=""
	else
		TARGET_DIR="$(dirname "${TARGET}")"
		TARGET_NAME="$(basename "${TARGET}")"
	fi
else
	TARGET_DIR="$(dirname "${TARGET}")"
	TARGET_NAME="$(basename "${TARGET}")"
fi

TARGET_DIR="$(readlink -f "${TARGET_DIR}")" || fail "Failed to identify the true target directory for [${TARGET}]"
mkdir -p "${TARGET_DIR}" || fail "Failed to create the target directory at [${TARGET_DIR}] (rc=${?})"

WORKDIR="$(mktemp --directory --tmpdir "apache-download.XXXXXXXX")"
trap cleanup EXIT

cd "${WORKDIR}" || fail "Failed to CD into the working directory [${WORKDIR}]"

KEYS="KEYS}"
FILENAME="${ARTIFACT_URL}"
# First, remove the query if present
FILENAME="${FILENAME%%\?*}"
# Now get the filename
FILENAME="${FILENAME##*/}"
# URLDecode the filename
FILENAME="$(urldecode "${FILENAME}")"

# Download the artifact and the validation stuff
doing "Downloading the GPG keys from [${KEYS_URL}] ..."
curl -fL -o "${KEYS}" "${KEYS_URL}" || fail "Failed to download the signature keys from [${KEYS_URL}]"
doing "Downloading the main artifact from [${ARTIFACT_URL}] ..."
curl -fL -o "${FILENAME}" "${ARTIFACT_URL}" || fail "Failed to download the main artifact from [${ARTIFACT_URL}]"
doing "Downloading the artifact's signature ..."
curl -fL -o "${FILENAME}.asc" "${ARTIFACT_URL}.asc" || fail "Failed to download the signature from [${ARTIFACT_URL}.asc]"
doing "Downloading the artifact's hash ..."
curl -fL -o "${FILENAME}.sha512" "${ARTIFACT_URL}.sha512" || fail "Failed to download the hash from [${ARTIFACT_URL}.sha512]"

# First things first: does the checksum jive?
eyes "Checking the artifact's integrity with the hash..."
sha512sum -c "${FILENAME}.sha512" || fail "Failed to verify the checksum for the downloaded artifact"
ok "Integrity verified!"

# Next ... import the GPG keys
doing "Importing the downloaded keys..."
gpg --homedir "${WORKDIR}" --import < "${KEYS}" || fail "Failed to import the GPG keys"
ok "Keys imported!"

# Finally, check the GPG signature
eyes "Verifying the artifact's authenticity as per the downloaded keys..."
gpg --homedir "${WORKDIR}" --auto-key-retrieve --verify "${FILENAME}.asc" "${FILENAME}" || fail "Failed to verify the GPG signature (rc=${?})"
ok "Authenticity verified!"

TARGET="${TARGET_DIR}/${TARGET_NAME:-${FILENAME}}"

# Ok ... we're good! Now copy the artifact to wherever it's supposed to go!
ln "${FILENAME}" "${TARGET}" || cp -vf "${FILENAME}" "${TARGET}" || fail "Failed to hard-link or copy the downloaded artifact from [${ARTIFACT_URL}] into the target location at [${TARGET}]"
ok "Downloaded and verified [${ARTIFACT_URL}] into [${TARGET}]"
